name: CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  backend:
    name: Backend - Flask CI/CD
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/FastAPI-ToDo-List
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint backend code
        run: |
          pip install flake8
          flake8 .

  lint-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/Simple-Todos-In-React-JS
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Lint frontend code
        run: |
          npm install --save-dev eslint
          npx eslint src
  
  deploy-to-traceassist:
    name: Deploy to TraceAssist on EC2/Minikube
    needs: [lint-frontend]
    uses: ./.github/workflows/traceassist-deploy.yml

    # ① Populate these from your repo Secrets
    env:
      EC2_USER:    ${{ secrets.EC2_USER }}
      EC2_HOST:    ${{ secrets.EC2_HOST }}

    # ② Pass them in via with: (using env, not secrets)
    with:
      ec2_user:    ${{ env.EC2_USER }}
      ec2_host:    ${{ env.EC2_HOST }}

    # ③ Still supply the SSH key as a secret
    secrets:
      ec2_ssh_key: ${{ secrets.EC2_SSH_KEY }}

  build-and-push-backend:
    needs: [lint-backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/fastapi-todo:latest ./backend/FastAPI-ToDo-List
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/simple-todo-backend:latest

  build-and-push-frontend:
    needs: [lint-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/react-todo-frontend:latest ./frontend/Simple-Todos-In-React-JS
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/react-todo-frontend:latest

  deploy-backend:
    needs: [build-and-push-backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
      - name: Deploy backend with Helm
        run: |
          helm upgrade --install backend ./helm/backend \
            --set image.repository=${{ secrets.ACR_LOGIN_SERVER }}/simple-todo-backend \
            --set image.tag=latest

  deploy-frontend:
    needs: [build-and-push-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy frontend to AKS using Helm
        run: |
          helm upgrade --install frontend ./helm/frontend \
            --set image.repository=${{ secrets.ACR_LOGIN_SERVER }}/frontend-todo \
            --set image.tag=${{ github.sha }} \
            --namespace default
        working-directory: ${{ github.workspace }}

  # Optionally, add a deploy job here if you have deployment steps or environments
  