name: Full Deploy to EC2/Minikube

on:
  workflow_call:
    inputs:
      ec2_user:
        description: “user to SSH into EC2”
        required: true
        type: string
      ec2_host:
        description: “EC2 host (IP or DNS)”
        required: true
        type: string
      ec2_ssh_key:
        description: “SSH private key (base64 or multiline)”
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.ec2_ssh_key }}

      - name: SSH & Deploy to Minikube
        env:
          EC2_USER: ${{ inputs.ec2_user }}
          EC2_HOST: ${{ inputs.ec2_host }}
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            set -eux
            # 1️⃣ Install & enable dependencies
            sudo apt-get update
            sudo apt-get install -y curl apt-transport-https conntrack git
            sudo apt-get install -y docker.io
            sudo systemctl enable --now docker
            # kubectl
            curl -LO https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            # Minikube
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            chmod +x minikube && sudo mv minikube /usr/local/bin/
            # Helm
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
            # 2️⃣ Clone & run TraceAssist
            if [ -d "$HOME/traceAssist" ]; then
              cd "$HOME/traceAssist"
              git pull
            else
              git clone https://github.com/harshit-jindal02/traceAssist.git "$HOME/traceAssist"
              cd "$HOME/traceAssist"
            fi
            chmod +x run.sh
            sudo usermod -aG docker $USER
            newgrp docker << EOI
            ./run.sh
            EOI
            # 3️⃣ Clone TaskWeb app
            if [ -d "$HOME/taskweb-insightAssist" ]; then
              cd "$HOME/taskweb-insightAssist"
              git pull
            else
              git clone https://github.com/harshit-jindal02/taskweb-insightAssist.git "$HOME/taskweb-insightAssist"
              cd "$HOME/taskweb-insightAssist"
            fi
            # 4️⃣ Build images inside Minikube’s Docker daemon
            eval \$(minikube docker-env)
            docker build -t taskweb/backend:latest backend/Flask-ToDo-List
            docker build -t taskweb/frontend:latest frontend/Simple-Todos-In-React-JS
            # 5️⃣ Apply manifest & restart to trigger OTel injection
            kubectl apply -f k8s/taskweb-deploy.yaml
            kubectl rollout restart deployment backend frontend -n traceassist
            # 6️⃣ Port-forward in background so you can curl
            sleep 25
            nohup kubectl port-forward svc/backend-svc -n traceassist 5000:5000 >/dev/null 2>&1 &
            nohup kubectl port-forward svc/frontend-svc -n traceassist 8080:80 >/dev/null 2>&1 &
            sleep 5
            curl http://localhost:5000/api/todos
            curl http://localhost:8080
            echo "🔗 Port-forwards established: backend→localhost:5000, frontend→localhost:8080"
          EOF